/*
*
* Copyright (c) 2022 Rafael Rom√£o
* SPDX-License-Identifier: MIT
*
*/

/ {
    #define THUMB_LAYERTAP(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            require-prior-idle-ms = <QUICK_TAP_TERM>; \
            bindings = <&mo>, <BINDINGS>; \
        };

    #define THUMB_MACRO(NAME, BINDINGS) \
        NAME: NAME { \
			compatible = "zmk,behavior-macro"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            wait-ms = <10>; \
            tap-ms = <10>; \
            bindings = <&macro_tap BINDINGS>; \
        };

    #define THUMB_MORPH(NAME, MODS, MODDED, UNMODDED) \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            bindings = <UNMODDED>, <MODDED>; \
            mods = <(MODS)>; \
        };

    #define THUMB_COMBO_MORPH(NAME, FIRST_MOD, SECOND_MOD, IF_BOTH, OR_ELSE) \
        NAME##_CHECK_SECOND: NAME##_CHECK_SECOND { \
            compatible = "zmk,behavior-mod-morph"; \
            label = ZMK_MACRO_STRINGIFY(NAME##_CHECK_SECOND); \
            #binding-cells = <0>; \
            bindings = <OR_ELSE>, <IF_BOTH>; \
            mods = <(SECOND_MOD)>; \
        }; \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <0>; \
            bindings = <OR_ELSE>, <&NAME##_CHECK_SECOND>; \
            mods = <(FIRST_MOD)>; \
        };

    thumbs {
        
        // ********************** CUSTOM HOLD TAPS ********************** //

        ltn: layer-tap-no-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(layer-tap-no-quick-tap);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&kp>;
        };
        msl: layer-tap-with-stick-layer {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(layer-tap-with-stick-layer);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&sl>;
        };
        msk: layer-tap-with-stick-key {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(layer-tap-with-stick-key);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&sk>;
        };
        mst: layer-tap-with-tog-key {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(layer-tap-with-tog-key);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&tog>;
        };

        // ********************** SENTENCE CASE ********************** //

        THUMB_MACRO(tc_cancel,        &kp K_CANCEL)
        THUMB_MACRO(tc_sp_ns,         &kp SPACE &sl SEN_E1)
        THUMB_MACRO(tc_nsen,          &sl SEN_E1)
        THUMB_LAYERTAP(th_sp_ns,      &tc_sp_ns)
        THUMB_LAYERTAP(th_cancel,     &tc_cancel)
        THUMB_LAYERTAP(th_nsen,       &tc_nsen)

        // ********************** NUM WORD ********************** //

        custom_num_word: custom_num_word {
            compatible = "zmk,behavior-caps-word";
            label = ZMK_MACRO_STRINGIFY(custom_num_word);
            ignore-numbers;
			#binding-cells = <0>;
            layers = <NUMPAD>;
            continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12>;
        };

        THUMB_MACRO(tc_custom_num_word,     &to ALPHA1 &custom_num_word)

        // ******************* SMART SHIFT / CAPS WORD ******************* //

        custom_caps_word: custom_caps_word {
            compatible = "zmk,behavior-caps-word";
            label = ZMK_MACRO_STRINGIFY(custom_caps_word);
            ignore-alphas;
            ignore-modifiers;
			#binding-cells = <0>;  
            layers = <CASE_A1>;
            continue-list = <UNDERSCORE MINUS BACKSPACE DELETE SQT TILDE CARET GRAVE >;
        };

        shift_caps_word: shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            label = ZMK_MACRO_STRINGIFY(shift_caps_word);
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&custom_caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // ******************** SMART SHIFT / REPEAT KEY ******************** //

        ht_repeat: ht_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(ht_repeat);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&smart_shift_repeat>;
        };
        smart_shift_repeat: smart_shift_repeat {
            compatible = "zmk,behavior-antecedent-morph";
            label = ZMK_MACRO_STRINGIFY(smart_shift_repeat);
            #binding-cells = <0>;
            max-delay-ms = <ADAPTIVE_KEY_TIMEOUT>;
            defaults = <&shift_caps_word>;
            antecedents = <A           AACU_TERM   ATIL_TERM   ACIR_TERM   AGRV_TERM   B           C           C_CEDIL     D           \
                           E           EACU_TERM   ECIR_TERM   F           G           H           I           IACU_TERM   J           \
                           K           L           M           N           O           OACU_TERM   OTIL_TERM   OCIR_TERM   P           \
                           Q           QU_TERM     R           S           T           U           UACU_TERM   V           W           \
                           X           Y           Z           DOT         MINUS>;
            bindings =    <&tc_nd      &kp V       &kp O       &kp N       &mc_qu      &key_repeat &key_repeat &tc_atilo   &key_repeat \
                           &key_repeat &kp V       &kp E       &key_repeat &key_repeat &tc_oes     &tc_ng      &kp V       &ac_aacu    \
                           &tc_ey      &key_repeat &key_repeat &key_repeat &key_repeat &kp V       &tc_es      &kp O       &key_repeat \
                           &key_repeat &ac_ecir    &key_repeat &key_repeat &key_repeat &kp Y       &kp V       &ac_aacu    &tc_hy     \
                           &ac_aacu    &tc_ou      &key_repeat &tc_com     &tc_sep>;
        };
        THUMB_MACRO(tc_nd,      &kp N &kp D)
        THUMB_MACRO(tc_oes,     &ac_otil &kp E &kp S)
        THUMB_MACRO(tc_es,      &kp E &kp S)
        THUMB_MACRO(tc_ou,      &kp O &kp U)
        THUMB_MACRO(tc_ng,      &kp N &kp G)
        THUMB_MACRO(tc_ey,      &kp E &kp Y)
        THUMB_MACRO(tc_hy,      &kp H &kp Y)
        THUMB_MACRO(tc_atilo,   &ac_atil &kp O)
        THUMB_MACRO(tc_com,     &kp C &kp O &kp M)
        THUMB_MACRO(tc_sep,     &kp MINUS &kp MINUS)

        // ******************** SMART SHIFT / MAGIC KEY ******************** //

        ht_magic: ht_magic {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(ht_sc);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&smart_shift_magic>;
        };
        smart_shift_magic: smart_shift_magic {
            compatible = "zmk,behavior-antecedent-morph";
            label = ZMK_MACRO_STRINGIFY(smart_shift_magic);
            #binding-cells = <0>;
            max-delay-ms = <ADAPTIVE_KEY_TIMEOUT>;
            defaults = <&shift_caps_word>;
            antecedents = <A           AACU_TERM   ATIL_TERM   ACIR_TERM   AGRV_TERM   B                       C_CEDIL     D           \
                           E           EACU_TERM   ECIR_TERM   F           G                       I           IACU_TERM               \
                           K           L           M           N                       OACU_TERM   OTIL_TERM   OCIR_TERM   P           \
                           Q           QU_TERM     R                       T           U           UACU_TERM   V           W           \
                           X                                   DOT         MINUS>;
            bindings =    <&kp O       &kp X       &kp O       &kp M       &mc_qu      &kp Y                   &tc_otiles  &kp Y       \
                           &kp U       &kp U       &kp X       &kp Y       &kp U                   &tc_smart_i &kp Z                   \
                           &kp W       &kp H       &kp S       &kp F                   &kp X       &kp E       &kp V       &kp T       \
                           &key_repeat &ac_ecir    &kp L                   &kp W       &kp E       &kp Z       &ac_iacu    &kp K       \
                           &ac_iacu                            &kp SLASH   &kp GT>;
        };
        THUMB_MACRO(tc_otiles,   &ac_otil &kp E &kp S)
        THUMB_MACRO(tc_smart_i, &kp BACKSPACE &kp LS(I) &kp QUOT &kp SPACE)

        // ******************** SMART CASES ******************** //

        THUMB_MACRO(mc_sl_alpha2,  &sl ALPHA2)

        msl_a2: msl_a2 {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(msl_a2);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&mc_sl_alpha2>;
        };

        THUMB_MORPH(sc_caps_word,  MOD_LCTL, &custom_caps_word         , &msl_a2 RAISE 0 )
        THUMB_MORPH(sc_caps_lock,  MOD_RCTL, &to CASE_A1               , &sc_caps_word   )
        THUMB_MORPH(sc_numpad,     MOD_LALT, &to NUMPAD                , &sc_caps_lock   )
        THUMB_MORPH(sc_numword,    MOD_RALT, &custom_num_word          , &sc_numpad      )
        THUMB_MORPH(sc_camelcase,  MOD_RSFT, &to CAMEL_CASE            , &sc_numword     )
        THUMB_MORPH(sc_snakecase,  MOD_LGUI, &to SNAKE_CASE            , &sc_camelcase   )
        THUMB_MORPH(sc_kebabcase,  MOD_RGUI, &to KEBAB_CASE            , &sc_snakecase   )

        THUMB_MACRO(tc_shift_camel,  &to CAMEL_CASE &sl CAMEL_CASE_S)
        THUMB_COMBO_MORPH(sc_pascalcase, MOD_RSFT|MOD_LSFT, MOD_LCTL, &tc_shift_camel, &sc_kebabcase)
        
        #define msl_raise_smart sc_pascalcase

        THUMB_MACRO(mc_msk_camel, &sl CAMEL_CASE_S)
        THUMB_MACRO(mc_msk_snake, &kp UNDERSCORE &sl SPACING)
        THUMB_MACRO(mc_msk_kebab, &kp MINUS &sl SPACING)
        THUMB_MACRO(mc_msk_space, &kp SPACE &to ALPHA1)
        THUMB_MACRO(mc_msk_space_b, &kp BACKSPACE &kp SPACE &to ALPHA1)

        msk_unds: msk_unds {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(msk_unds);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&mc_msk_snake>;
        };

        msk_dash: msk_dash {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(msk_dash);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&mc_msk_kebab>;
        };

        msk_spcb: msk_spcb {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(msk_spcb);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&mc_msk_space_b>;
        };

        msk_sft: msk_sft {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(msk_sft);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&mc_msk_camel>;
        };

        msk_spc: msk_spc {
            compatible = "zmk,behavior-hold-tap";
            label = ZMK_MACRO_STRINGIFY(msk_spc);
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_TERM>;
            bindings = <&mo>, <&mc_msk_space>;
        };

    };
};
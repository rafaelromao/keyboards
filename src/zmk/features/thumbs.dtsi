/*
*
* Copyright (c) 2022 Rafael Rom√£o
* SPDX-License-Identifier: MIT
*
*/

/ {
    #define THUMB_LAYERTAP(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            tapping-term-ms = <QUICK_TAP_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <0>; \
            require-prior-idle-ms = <QUICK_TAP_TERM>; \
            bindings = <&mo>, <BINDINGS>; \
        };

    #define THUMB_MACRO(NAME, BINDINGS) \
        NAME: NAME { \
			compatible = "zmk,behavior-macro"; \
            #binding-cells = <0>; \
            wait-ms = <10>; \
            tap-ms = <10>; \
            bindings = <&macro_tap BINDINGS>; \
        };

    #define THUMB_MORPH(NAME, MODS, MODDED, UNMODDED) \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <UNMODDED>, <MODDED>; \
            mods = <(MODS)>; \
        };

    #define THUMB_COMBO_MORPH(NAME, FIRST_MOD, SECOND_MOD, IF_BOTH, OR_ELSE) \
        NAME##_CHECK_SECOND: NAME##_CHECK_SECOND { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <OR_ELSE>, <IF_BOTH>; \
            mods = <(SECOND_MOD)>; \
        }; \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <OR_ELSE>, <&NAME##_CHECK_SECOND>; \
            mods = <(FIRST_MOD)>; \
        };

    thumbs {
        
        // ********************** CUSTOM HOLD TAPS ********************** //

        ltn: layer-tap-no-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&kp>;
        };
        msl: layer-tap-with-stick-layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&sl>;
        };
        msk: layer-tap-with-stick-key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&sk>;
        };
        mst: layer-tap-with-tog-key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&tog>;
        };

        // ********************** SENTENCE CASE ********************** //

        tc_cancel: tc_cancel {
			compatible = "zmk,behavior-macro";
            label = "tc_cancel";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &kp K_CANCEL &to ALPHA1>;
        };
        THUMB_MACRO(tc_sp_ns,         &kp SPACE &sl SEN_E1)
        THUMB_MACRO(tc_nsen,          &sl SEN_E1)
        THUMB_LAYERTAP(th_sp_ns,      &tc_sp_ns)
        THUMB_LAYERTAP(th_cancel,     &tc_cancel)
        THUMB_LAYERTAP(th_nsen,       &tc_nsen)

        // ********************** NUM WORD ********************** //

        custom_num_word: custom_num_word {
            compatible = "zmk,behavior-caps-word";
            ignore-numbers;
			#binding-cells = <0>;
            layers = <NUMPAD>;
            continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL MOVE_LEFT MOVE_RIGHT MOVE_UP MOVE_DOWN SCRL_DOWN SCRL_UP RCLK LCLK>;
        };

        THUMB_MACRO(tc_custom_num_word, &to ALPHA1 &custom_num_word)

        // ******************* CAPS WORD ******************* //

        custom_caps_word: custom_caps_word {
            compatible = "zmk,behavior-caps-word";
            ignore-alphas;
            ignore-modifiers;
			#binding-cells = <0>;  
            layers = <CASE_A1>;
            continue-list = <UNDERSCORE MINUS BACKSPACE DELETE SQT TILDE CARET GRAVE >;
        };

        THUMB_MACRO(tc_shift_layer, &sl SHIFT_A1)

        ht_shift: ht_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&tc_shift_layer>;
        };

        ht_caps: ht_caps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&custom_caps_word>;
        };

        // ******************** REPEAT KEY ******************** //

        labeled_key_repeat: labeled_key_repeat {
			compatible = "zmk,behavior-macro";
            label = "labeled_key_repeat";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &key_repeat>;
        };

        labeled_h: labeled_h {
			compatible = "zmk,behavior-macro";
            label = "labeled_h";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &kp H>;
        };

        smart_repeat: smart_repeat {
            compatible = "zmk,behavior-antecedent-morph";
            label = "smart_repeat";
            #binding-cells = <0>;
            max-delay-ms = <ADAPTIVE_KEY_TIMEOUT>;
            defaults = <&labeled_key_repeat>;
            antecedents = <
                            H                     QU_TERM      AGRV_TERM    C_CEDIL       SQUO_TERM   \
                            LS(H)      LS(I)      C_QU_TERM    C_AGRV_TERM  LS(C_CEDIL)   C_SQUO_TERM \
                            RS(H)      RS(I)      S_QU_TERM    S_AGRV_TERM  RS(C_CEDIL)               \
                           >;
            bindings =    <
                            &tc_ah                &ac_ecir     &mc_qu       &sk ALPHA2    &kp V       \
                            &tc_ah_c   &mc_sqo    &ac_ecir_c   &mc_qu_c     &sk CASE_A2   &kp V       \
                            &tc_ah     &mc_sqo    &ac_ecir_s   &mc_qu       &sk SHIFT_A2              \
                           >;
        };

        THUMB_MACRO(tc_ah,      &kp A &kp H)
        THUMB_MACRO(tc_ey,      &kp E &kp Y)
        THUMB_MACRO(tc_hy,      &kp H &kp Y)
        THUMB_MACRO(tc_ah_c,    &kp LS(A) &kp LS(H))
        THUMB_MACRO(tc_ey_c,    &kp LS(E) &kp LS(Y))
        THUMB_MACRO(tc_hy_c,    &kp LS(H) &kp LS(Y))

        ht_repeat: ht_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&smart_repeat>;
        };

        // ******************** MAGIC KEY ******************** //

        smart_magic: smart_magic {
            compatible = "zmk,behavior-antecedent-morph";
            label = "smart_magic";
            #binding-cells = <0>;
            max-delay-ms = <ADAPTIVE_KEY_TIMEOUT>;
            defaults = <&labeled_h>;
            antecedents = <
                           A             AACU_TERM     ATIL_TERM     ACIR_TERM     AGRV_TERM       B             C               C_CEDIL         D            \
                           E             EACU_TERM     ECIR_TERM     F             G               H             I               IACU_TERM       J            \
                           K             L             M             N             O               OACU_TERM     OTIL_TERM       OCIR_TERM       P            \
                           Q             QU_TERM       R             S             T               U             UACU_TERM       V               W            \
                           X             Y             Z             DOT           SQUO_TERM                                                                  \

                           LS(A)         C_AACU_TERM   C_ATIL_TERM   C_ACIR_TERM   C_AGRV_TERM     LS(B)         LS(C)           LS(C_CEDIL)     LS(D)        \
                           LS(E)         C_EACU_TERM   C_ECIR_TERM   LS(F)         LS(G)           LS(H)         LS(I)           C_IACU_TERM     LS(J)        \
                           LS(K)         LS(L)         LS(M)         LS(N)         LS(O)           C_OACU_TERM   C_OTIL_TERM     C_OCIR_TERM     LS(P)        \
                           LS(Q)         C_QU_TERM     LS(R)         LS(S)         LS(T)           LS(U)         C_UACU_TERM     LS(V)           LS(W)        \
                           LS(X)         LS(Y)         LS(Z)                       C_SQUO_TERM                                                                \

                           RS(A)         S_AACU_TERM   S_ATIL_TERM   S_ACIR_TERM   S_AGRV_TERM     RS(B)         RS(C)           RS(C_CEDIL)     RS(D)        \
                           RS(E)         S_EACU_TERM   S_ECIR_TERM   RS(F)         RS(G)           RS(H)         RS(I)           S_IACU_TERM     RS(J)        \
                           RS(K)         RS(L)         RS(M)         RS(N)         RS(O)           S_OACU_TERM   S_OTIL_TERM     S_OCIR_TERM     RS(P)        \
                           RS(Q)         S_QU_TERM     RS(R)         RS(S)         RS(T)           RS(V)         S_UACU_TERM     RS(V)           RS(W)        \
                           RS(X)         RS(Y)         RS(Z)                                                                                                  \
                           >;
            bindings =    <
                           &kp V         &kp V         &none         &none         &none           &kp Y         &kp H           &sl ALPHA2      &kp Y        \
                           &kp V         &kp V         &kp V         &kp Y         &kp H           &sl ALPHA2    &kp V           &kp V           &sl ALPHA2   \
                           &sl ALPHA2    &kp H         &kp Y         &kp H         &kp V           &kp Y         &none           &kp V           &kp H        \
                           &sl ALPHA2    &sl ALPHA2    &kp H         &kp H         &kp H           &kp V         &kp V           &sl ALPHA2      &kp H        \
                           &sl ALPHA2    &sl ALPHA2    &sl ALPHA2    &kp SLASH     &kp V                                                                      \

                           &kp LS(V)     &kp LS(V)     &none         &none         &none           &kp LS(Y)     &kp LS(H)       &sl CASE_A2     &kp LS(Y)    \
                           &kp LS(V)     &kp LS(V)     &kp LS(V)     &kp LS(Y)     &kp LS(H)       &sl CASE_A2   &kp V           &kp LS(V)       &sl CASE_A2  \
                           &sl CASE_A2   &kp LS(H)     &kp LS(Y)     &kp LS(H)     &kp LS(V)       &kp LS(V)     &none           &kp LS(V)       &kp LS(H)    \
                           &sl CASE_A2   &sl CASE_A2   &kp LS(H)     &kp LS(H)     &kp LS(H)       &kp LS(V)     &kp LS(V)       &sl CASE_A2     &kp LS(H)    \
                           &sl CASE_A2   &sl CASE_A2   &sl CASE_A2                 &kp V                                                                      \

                           &kp V         &kp V         &none         &none         &none           &kp Y         &kp H           &sl ALPHA2      &kp Y        \
                           &kp V         &kp V         &kp V         &kp Y         &kp H           &sl ALPHA2    &kp V           &kp V           &sl ALPHA2   \
                           &sl ALPHA2    &kp H         &kp Y         &kp H         &kp V           &kp Y         &none           &kp V           &kp H        \
                           &sl ALPHA2    &sl ALPHA2    &kp H         &kp H         &kp H           &kp V         &kp V           &sl ALPHA2      &kp H        \
                           &sl ALPHA2    &sl ALPHA2    &sl ALPHA2                                                                                             \
                           >;
        };


        ht_magic: ht_magic {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&kp>, <&smart_magic>;
        };

        // ******************** SMART CASES ******************** //

        THUMB_MACRO(mc_sl_alpha2,  &sl ALPHA2)

        msl_a2: msl_a2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mc_sl_alpha2>;
        };

        THUMB_MORPH(sc_numpad,     MOD_LALT, &to NUMPAD                , &sc_caps_lock   )
        THUMB_MORPH(sc_camelcase,  MOD_LSFT, &to CAMEL_CASE            , &sc_numword     )
        THUMB_MORPH(sc_caps_word,  MOD_LCTL, &custom_caps_word         , &msl_a2 RAISE 0 )
        THUMB_MORPH(sc_snakecase,  MOD_LGUI, &to SNAKE_CASE            , &sc_camelcase   )

        THUMB_MORPH(sc_numword,    MOD_RALT, &custom_num_word          , &sc_numpad      )
        THUMB_MORPH(sc_kebabcase,  MOD_RGUI, &to KEBAB_CASE            , &sc_snakecase   )
        THUMB_MORPH(sc_caps_lock,  MOD_RCTL, &to CASE_A1               , &sc_caps_word   )
        THUMB_MORPH(sc_slashcase,  MOD_RSFT, &to SLASH_CASE            , &sc_kebabcase   )

        THUMB_MACRO(tc_shift_camel,  &to CAMEL_CASE &sl SHIFT_A1)
        THUMB_COMBO_MORPH(sc_pascalcase, MOD_LCTL, MOD_LSFT, &tc_shift_camel, &sc_slashcase)

        THUMB_MACRO(tc_strong_snakecase,  &tog CASE_A1 &tog SNAKE_CASE)
        THUMB_COMBO_MORPH(sc_strong_snake_case, MOD_LCTL, MOD_LGUI, &tc_strong_snakecase, &sc_pascalcase)
        
        THUMB_MACRO(tc_strong_kebabcase,  &tog CASE_A1 &tog KEBAB_CASE)
        THUMB_COMBO_MORPH(sc_strong_kebab_case, MOD_RCTL, MOD_RGUI, &tc_strong_kebabcase, &sc_strong_snake_case)
        
        THUMB_MACRO(tc_strong_slashcase,  &tog CASE_A1 &tog SLASH_CASE)
        THUMB_COMBO_MORPH(sc_strong_slash_case, MOD_RCTL, MOD_RSFT, &tc_strong_slashcase, &sc_strong_kebab_case)
        
        #define msl_raise_smart sc_strong_slash_case

        THUMB_MACRO(mc_msk_camel, &sl SHIFT_A1)
        THUMB_MACRO(mc_msk_snake, &kp UNDERSCORE &sl SPACING)
        THUMB_MACRO(mc_msk_kebab, &kp MINUS &sl SPACING)
        THUMB_MACRO(mc_msk_slash, &kp SLASH &sl SPACING)
        THUMB_MACRO(mc_msk_space, &kp SPACE &to ALPHA1)
        THUMB_MACRO(mc_msk_space_b, &kp BACKSPACE &kp SPACE &to ALPHA1)

        msk_unds: msk_unds {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mc_msk_snake>;
        };

        msk_dash: msk_dash {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mc_msk_kebab>;
        };

        msk_slash: msk_slash {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mc_msk_slash>;
        };

        msk_spcb: msk_spcb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mc_msk_space_b>;
        };

        msk_sft: msk_sft {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mc_msk_camel>;
        };

        msk_spc: msk_spc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mc_msk_space>;
        };

    };
};
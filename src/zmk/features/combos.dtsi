/*
*
* Copyright (c) 2022 Rafael Romão
* SPDX-License-Identifier: MIT
*
*/

/*                KEY POSITIONS

  ╭─────────────────────╮ ╭─────────────────────╮
  │ LTP LTR LTM LTI     │ │     RTI RTM RTR RTP │
  │ LHP LHR LHM LHI LHC │ │ RHC RHI RHM RHR RHP │
  │     LBR LBM LBI LBC │ │ RBC RBI RBM RBR     │
  ╰───────╮     L1  L0  │ │ R0  R1      ╭───────╯
          ╰─────────────╯ ╰─────────────╯ */

/ {
    #define SENTENCE_CASE_LAYERS        SEN_CASE SEN_E1 SEN_E2 
    #define ALPHA1_LAYERS               ALPHA1 CASE_A1 PLAIN1 CPLK_A1 SENTENCE_CASE_LAYERS 
    #define CCEDIL_LAYERS               CCEDIL CASE_CCEDIL 
    #define ALPHA2_LAYERS               ALPHA2 CASE_A2 PLAIN2 SHIFT_A2
    #define SMARTCASE_LAYERS            CAMEL_CASE SNAKE_CASE KEBAB_CASE SLASH_CASE SPACING 
    #define LOWER_LAYERS                LOWER LOW_CP  
    #define RAISE_LAYERS                RAISE RAI_CP   
    #define SHORTCUT_LAYERS             SHORTCUTS SHORTS_EXT_1 SHORTS_EXT_2 CUSTOM  
    #define MEDIA_LAYERS                MEDIA
    #define NAV_LAYERS                  NAV NAV_F  
    #define ALL_LAYERS                  ALPHA1_LAYERS ALPHA2_LAYERS CCEDIL_LAYERS SMARTCASE_LAYERS LOWER_LAYERS SHORTCUT_LAYERS MEDIA_LAYERS NAV_LAYERS RAISE_LAYERS SMART 
    #define ALL_LAYERS_WITH_BACKSPACE   ALPHA1_LAYERS ALPHA2_LAYERS CCEDIL_LAYERS SMARTCASE_LAYERS LOWER_LAYERS SHORTCUT_LAYERS MEDIA_LAYERS NAV_LAYERS RAISE_LAYERS        
    #define ALL_LAYERS_WITH_ESC         ALPHA1_LAYERS ALPHA2_LAYERS CCEDIL_LAYERS SMARTCASE_LAYERS              SHORTCUT_LAYERS MEDIA_LAYERS NAV_LAYERS                     
    #define FIXABLE_LAYERS              PLAIN1 LOWER_LAYERS MEDIA_LAYERS NAV_LAYERS CUSTOM FUNCTIONS

    #define COMBO_TERM 20

    #define COMBO(NAME, KEYS, BINDINGS, LAYERS) \
        NAME { \
            timeout-ms = <COMBO_TERM>; \
            layers = <LAYERS>; \
            key-positions = <KEYS>; \
            bindings = <BINDINGS>; \
        };

    combos {
        compatible = "zmk,combos";

        COMBO(cb_backspace,     RTM RTR,     &kp BACKSPACE,      ALL_LAYERS_WITH_BACKSPACE)
        COMBO(cb_esc,           LTR LTM,     &kp ESC,            ALL_LAYERS_WITH_ESC)

        COMBO(cb_boot_l,        LTR LBI,     &bootloader,        ALL_LAYERS)
        COMBO(cb_boot_r,        RTR RBI,     &bootloader,        ALL_LAYERS)
        COMBO(cb_alpha1,        RTM RTR RTI, &to ALPHA1,         FIXABLE_LAYERS)

        COMBO(cb_save,          LHR LHM L0,  &mc_save,           ALL_LAYERS)
        COMBO(cb_fullscr,       LHM LHI L0,  &mc_fullscr,        ALL_LAYERS)
        COMBO(cb_find,          LBM LBI L0,  &mc_find,           ALL_LAYERS)
        COMBO(cb_undo,          LBR LBM L0,  &mc_undo,           ALL_LAYERS)
        COMBO(cb_enter,         RHM RHR R0,  &kp ENTER,          ALL_LAYERS)
        COMBO(cb_tab,           RTM RTR R0,  &kp TAB,            ALL_LAYERS)
        COMBO(cb_paste,         RBI RBM R0,  &mc_paste,          ALL_LAYERS)
        COMBO(cb_copy,          RHI RHM R0,  &mc_copy,           ALL_LAYERS)
        COMBO(cb_selall,        RBM RBR R0,  &mc_selall,         ALL_LAYERS)
        COMBO(cb_selcopy,       RHI RHM RHR R0,  &mc_selcopy,    ALL_LAYERS)
        COMBO(cb_selpaste,      RBI RBM RBR R0,  &mc_selpaste,   ALL_LAYERS)

        COMBO(cb_numword,       LBR LBM,         &tc_num_word,   ALPHA1_LAYERS)
        COMBO(cd_sc_nav,        LHR LHM L1,      &mc_sc_nav,     ALPHA1_LAYERS)
        COMBO(cd_ca_nav,        LHM LHI L1,      &mc_ca_nav,     ALPHA1_LAYERS)
        COMBO(cd_gca_nav,       LBR LHM LHI L1,  &mc_gca_nav,    ALPHA1_LAYERS)
        COMBO(cd_sca_nav,       LHR LHM LHI L1,  &mc_sca_nav,    ALPHA1_LAYERS)

        COMBO(cb_esc_save,      LTR LTM L0,  &mc_save_esc,       ALPHA1_LAYERS)

        COMBO(cb_semi,          RBM RBR,     &th_semi 0 0,       ALPHA1_LAYERS LOWER_LAYERS)
        COMBO(cb_sent,          RBI RBM RBR, &mc_end_semi_ent,   ALPHA1_LAYERS LOWER_LAYERS)

        COMBO(cb_k,             LTM LTI,     &kp K,              ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_w,             LHM LHI,     &ht_w 0 0,          ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_v,             LBI LBM,     &kp V,              ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_q,             LHR LHM,     &ht_q 0 0,          ALPHA1 PLAIN1 SEN_CASE)

        COMBO(cb_kc,            LTM LTI,     &kp LS(K),          CASE_A1 SEN_E1 CPLK_A1)
        COMBO(cb_wc,            LHM LHI,     &kp LS(W),          CASE_A1 SEN_E1 CPLK_A1)
        COMBO(cb_vc,            LBI LBM,     &kp LS(V),          CASE_A1 SEN_E1 CPLK_A1)
        COMBO(cb_qc,            LHR LHM,     &kp LS(Q),          CASE_A1 SEN_E1 CPLK_A1)

        COMBO(cb_x,             RTI RTM,     &kp X,              ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_z,             RHI RHM,     &ht_z 0 0,          ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_j,             RBI RBM,     &kp J,              ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_y,             RHM RHR,     &ht_y 0 0,          ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_d,             RTI RTM RTR, &kp D,              ALPHA1 PLAIN1 SEN_CASE)
        COMBO(cb_p,             RHI RHM RHR, &ht_p 0 0,          ALPHA1 PLAIN1 SEN_CASE)

        COMBO(cd_meh_spc,       LHR LHM LHI, &ht_meh_spc 0 0,    ALPHA1_LAYERS)

        COMBO(cb_xc,            RTI RTM,     &kp LS(X),          CASE_A1 SEN_E1 CPLK_A1)
        COMBO(cb_zc,            RHI RHM,     &kp LS(Z),          CASE_A1 SEN_E1 CPLK_A1)
        COMBO(cb_jc,            RBI RBM,     &kp LS(J),          CASE_A1 SEN_E1 CPLK_A1)
        COMBO(cb_yc,            RHM RHR,     &kp LS(Y),          CASE_A1 SEN_E2 CPLK_A1)
        COMBO(cb_dc,            RTI RTM RTR, &kp LS(D),          CASE_A1 SEN_E1 CPLK_A1)
        COMBO(cb_pc,            RHI RHM RHR, &kp LS(P),          CASE_A1 SEN_E1 CPLK_A1)

        COMBO(cb_tog_nomods,    LTM LTI,     &to PLAIN1,         SHORTCUTS)
        COMBO(cb_tog_media,     LHM LHI,     &to MEDIA,          SHORTCUTS)
        COMBO(cb_tog_functions, LBM LBI,     &to FUNCTIONS,      SHORTCUTS)
        COMBO(cb_tog_lower,     RTM RTI,     &to LOWER,          SHORTCUTS)
        COMBO(cb_tog_nav,       RHM RHI,     &to NAV_F,          SHORTCUTS)
        COMBO(cb_tog_software,  RBM RBI,     &to CUSTOM,         SHORTCUTS)

        COMBO(cb_meh_k,         LTI LTM,     &mc_meh_k,          CUSTOM)
        COMBO(cb_meh_w,         LHI LHM,     &mc_meh_w,          CUSTOM)
        COMBO(cb_meh_v,         LBI LBM,     &mc_meh_v,          CUSTOM)
        COMBO(cb_meh_x,         RTI RTM,     &mc_meh_x,          CUSTOM)
        COMBO(cb_meh_z,         RHI RHM,     &mc_meh_z,          CUSTOM)
        COMBO(cb_meh_j,         RBI RBM,     &mc_meh_j,          CUSTOM)
        COMBO(cb_meh_q,         LHR LHM,     &mc_meh_q,          CUSTOM)
        COMBO(cb_meh_y,         RHR RHM,     &mc_meh_y,          CUSTOM)
        COMBO(cb_lower_cl,      LBM LBR,     &tc_num_word_cp,    CUSTOM)
        COMBO(cb_lower_cr,      RBM RBR,     &tc_num_word_cp,    CUSTOM)

        COMBO(cb_comm,          RHP R0,      &kp COMMA,          LOWER_LAYERS)
        COMBO(cb_sfl,           RTI RTM,     &kp LS(L),          LOWER_LAYERS)
        COMBO(cb_jv,            RHI RHM,     &kp A,              LOWER_LAYERS)
        COMBO(cb_pipev,         RBI RBM,     &kp PIPE,           LOWER_LAYERS)
        COMBO(cb_kv,            RHM RHR,     &kp E,              LOWER_LAYERS)

        COMBO(cb_braces_new,    LTR LTM,     &mc_braces_new,     LOWER_LAYERS)
        COMBO(cb_pars,          LHR LHM,     &th_pars 0 0,       LOWER_LAYERS)
        COMBO(cb_brackets,      LBR LBM,     &th_brackets NAV 0, LOWER_LAYERS)
        COMBO(cb_colon_colon,   LTM LTI,     &th_dcolon 0 0,     LOWER_LAYERS)
        COMBO(cb_and,           LHI LHM,     &th_and 0 0,        LOWER_LAYERS)
        COMBO(cb_or,            LBI LBM,     &th_or 0 0,         LOWER_LAYERS)

        COMBO(cb_eu,            LTR LTM LTI, &mc_euro,           LOWER_LAYERS)
        COMBO(cb_br,            LHR LHM LHI, &mc_br,             LOWER_LAYERS)
        COMBO(cb_us,            LBR LBM LBI, &mc_us,             LOWER_LAYERS)

        COMBO(cb_dhash,         LTR LTM,     &mc_dhash,          RAISE_LAYERS)
        COMBO(cb_sarrow,        LHR LHM,     &mc_sarrow,         RAISE_LAYERS)
        COMBO(cb_str,           LBR LBM,     &mc_str,            RAISE_LAYERS)
        COMBO(cb_thash,         LTR LTM LTI, &mc_thash,          RAISE_LAYERS)
        COMBO(cb_tdqo,          LHR LHM LHI, &mc_tdqo,           RAISE_LAYERS)
        COMBO(cb_tbti,          LBR LBM LBI, &mc_tbti,           RAISE_LAYERS)
        COMBO(cb_dsqo,          LTM LTI,     &mc_dsqo,           RAISE_LAYERS)
        COMBO(cb_ddqo,          LHM LHI,     &mc_ddqo,           RAISE_LAYERS)
        COMBO(cb_dbti,          LBM LBI,     &mc_dbti,           RAISE_LAYERS)

        COMBO(cb_eqeq,          RTI RTM,     &mc_eqeq,           RAISE_LAYERS)
        COMBO(cb_noteq,         RTR RTI RTM, &mc_noteq,          RAISE_LAYERS)
        COMBO(cb_caret_zero,    RHI RHM,     &th_caret_z 0 0,    RAISE_LAYERS)
        COMBO(cb_dol,           RHM RHR,     &kp DOLLAR,         RAISE_LAYERS)
        COMBO(cb_dds,           RHI RHM RHR, &mc_dds,            RAISE_LAYERS)
        COMBO(cb_q_r,           RBI RBM,     &kp Q,              RAISE_LAYERS)
        COMBO(cb_at,            RBM RBR,     &kp AT,             RAISE_LAYERS)
        COMBO(cb_tisl,          RBI RBM RBR, &mc_tisl,           RAISE_LAYERS)

        COMBO(cb_f10,           RBM RBI,     &kp F10,            FUNCTIONS)
        COMBO(cb_f11,           RHM RHI,     &kp F11,            FUNCTIONS)
        COMBO(cb_f12,           RTM RTI,     &kp F12,            FUNCTIONS)
        COMBO(cb_f13,           RBM RBR,     &kp F13,            FUNCTIONS)
        COMBO(cb_f14,           RHM RHR,     &kp F14,            FUNCTIONS)
        COMBO(cb_f15,           RTM RTR,     &kp F15,            FUNCTIONS)

        COMBO(cb_pascal_case,   LHR LHM,     &tc_pascal_case,    SMART)
        COMBO(cb_s_snakecase,   LHI LHM,     &tc_s_snakecase,    SMART)
        COMBO(cb_s_kebabcase,   LTI LTM,     &tc_s_kebabcase,    SMART)
        COMBO(cb_s_slashcase,   LTR LTM,     &tc_s_slashcase,    SMART)

        COMBO(cb_lpar,          RHI RHM RHR, &kp LPAR,           ALPHA2_LAYERS)
        COMBO(cb_rpar,          RBI RBM RBR, &kp RPAR,           ALPHA2_LAYERS)
        COMBO(cb_dqo,           RTI RTM RTR, &mc_dqo,            ALPHA2_LAYERS)
        COMBO(cb_minus,         RTI RTM,     &kp MINUS,          ALPHA2_LAYERS)
        COMBO(cb_dqo_s,         LTM LTI,     &kp DQT,            ALPHA2_LAYERS)
        COMBO(cb_sqo_s,         LHM LHI,     &kp SQT,            ALPHA2_LAYERS)
        COMBO(cb_bti_s,         LBM LBR,     &kp GRAVE,          ALPHA2_LAYERS)
        COMBO(cb_caret_s,       LHR LHM,     &kp CARET,          ALPHA2_LAYERS)
        COMBO(cb_tilde_s,       LBI LBM,     &kp TILDE,          ALPHA2_LAYERS)
        COMBO(cb_ques,          RHI RHM,     &mc_qmark,          ALPHA2_LAYERS)
        COMBO(cb_excl,          RBI RBM,     &mc_excl,           ALPHA2_LAYERS)
        COMBO(cb_unds,          RBM RBR,     &kp UNDERSCORE,     ALPHA2_LAYERS)

        COMBO(cb_grva,          RHM RHR,     &ac_agrv,           ALPHA2 SEN_E2)
        COMBO(cb_grvac,         RHM RHR,     &ac_agrv_c,         CASE_A2 SEN_E2 SHIFT_A2)

        COMBO(cb_o_esc,         RHI RHM,     &mc_o_esc,          MEDIA_LAYERS)
        COMBO(cb_sft_o_esc,     RHM RHR,     &mc_sft_o_esc,      MEDIA_LAYERS)
        COMBO(cb_dqt0p,         RHI RHM RHR, &mc_dqt0p,          MEDIA_LAYERS)
        COMBO(cb_v_r,           RBI RBM RBR, &kp V,              MEDIA_LAYERS)
        COMBO(cb_shiftv,        RBM RBR,     &kp LS(V),          MEDIA_LAYERS)
        COMBO(cb_ctrlv,         RBI RBM,     &kp LC(V),          MEDIA_LAYERS)
        COMBO(cb_mesc,          RTM RTR,     &kp ESC,            MEDIA_LAYERS)
        COMBO(cb_raise,         RTM RTI,     &mc_raise,          MEDIA_LAYERS)

        COMBO(cb_lower_nav,     LBR LBM,     &mo LOW_CP,         NAV_LAYERS)

        COMBO(cb_insert,        LTI LTM LTR, &kp INS,            NAV_LAYERS)
        COMBO(cb_down_home,     RBI RBM,     &mc_down_home,      NAV_LAYERS)
        COMBO(cb_down_end,      RBR RBM,     &mc_down_end,       NAV_LAYERS)
        COMBO(cb_up_end_del,    RTM RTI,     &mc_up_end_del,     NAV_LAYERS)
        COMBO(cb_pg_down,       RHM RHI,     &kp PAGE_DOWN,      NAV_LAYERS)
        COMBO(cb_pg_up,         RHM RHR,     &kp PAGE_UP,        NAV_LAYERS)
    };

    #define COMBO_MUST_TAP(NAME, HOLD, TAP) \
        NAME##hold: NAME##hold { \
            compatible = "zmk,behavior-macro"; \
            #binding-cells = <0>; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            bindings \
                = <&macro_press HOLD> \
                , <&macro_pause_for_release> \
                , <&macro_release HOLD> \
                ; \
        }; \
        NAME##tap: NAME##tap {  \
            compatible = "zmk,behavior-macro";  \
            #binding-cells = <0>; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            bindings = <&macro_tap TAP>; \
        }; \
        NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "hold-preferred"; \
            bindings = <&NAME##hold>, <&NAME##tap>; \
        };

    combo_must_tap {
        COMBO_MUST_TAP(ht_w       , &kp LCTL  &kp LALT          , &kp W)
        COMBO_MUST_TAP(ht_q       , &kp LSHFT &kp LCTL          , &kp Q)
        COMBO_MUST_TAP(ht_z       , &kp RCTL  &kp RALT          , &kp Z)
        COMBO_MUST_TAP(ht_y       , &kp RCTL  &kp RSFT          , &kp Y)
        COMBO_MUST_TAP(ht_meh_spc , &kp LSHFT &kp LCTL &kp LALT , &kp LS(LC(LA(SPC))))
        COMBO_MUST_TAP(ht_p       , &kp RSHFT &kp RCTL &kp RALT , &kp P)
    };
};
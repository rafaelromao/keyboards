/*
*
* Copyright (c) 2022 Rafael Rom√£o
* SPDX-License-Identifier: MIT
*
*/

/ {
    #define SHORTCUT(NAME, BINDINGS) \
        NAME: NAME { \
            compatible = "zmk,behavior-macro"; \
            #binding-cells = <0>; \
            wait-ms = <10>; \
            tap-ms = <10>; \
            bindings = <BINDINGS>; \
        };

    #define SHIFTED_SHORTCUT(NAME, UNSHIFTED, SHIFTED) \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <UNSHIFTED>, <SHIFTED>; \
            mods = <(MOD_LSFT|MOD_RSFT)>; \
        };

    #define MORPHED_SHORTCUT(NAME, UNMORPHED, MORPHED, MODS) \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <UNMORPHED>, <MORPHED>; \
            mods = <(MODS)>; \
        };

    #define MORPHED_SHORTCUT_KM(NAME, UNMORPHED, MORPHED, MODS) \
        NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <UNMORPHED>, <MORPHED>; \
            mods = <(MODS)>; \
            keep-mods = <(MODS)>; \
        };

    #define MODTAP_SHORTCUT(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            require-prior-idle-ms = <QUICK_TAP_TERM>; \
            bindings = <&kp>, <BINDINGS>; \
        };

    #define TAPHOLD_SHORTCUT(NAME, TAP, HOLD) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            require-prior-idle-ms = <QUICK_TAP_TERM>; \
            bindings = <HOLD>, <TAP>; \
        };

    #define LAYERTAP_SHORTCUT(NAME, BINDINGS) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            tapping-term-ms = <TAPPING_TERM>; \
            quick-tap-ms = <QUICK_TAP_TERM>; \
            require-prior-idle-ms = <QUICK_TAP_TERM>; \
            bindings = <&mo>, <BINDINGS>; \
        };
    
    shortcuts {
        
        // Romak

        SHORTCUT(mc_fullscr,                &macro_tap &kp LC(LG(F)))
        SHORTCUT(mc_find,                   &macro_tap &kp LG(F))
        SHORTCUT(mc_selall,                 &macro_tap &kp LG(A))
        SHORTCUT(mc_undo,                   &macro_tap &kp LG(Z))
        SHORTCUT(mc_copy,                   &macro_tap &kp LG(C))
        SHORTCUT(mc_selcopy,                &macro_tap &kp LG(A) &kp LG(C))
        SHORTCUT(mc_paste,                  &macro_tap &kp LG(V))
        SHORTCUT(mc_selpaste,               &macro_tap &kp LG(A) &kp LG(V))
        SHORTCUT(mc_save,                   &macro_tap &kp LG(S))
        SHORTCUT(mc_save_esc,               &macro_tap &kp LG(S) &kp ESC)
        SHORTCUT(mc_o_esc,                  &macro_tap &kp O &kp ESC)
        SHORTCUT(mc_sft_o_esc,              &macro_tap &kp LS(O) &kp ESC)
        SHORTCUT(mc_shift_tab,              &macro_tap &kp LS(TAB))

        SHORTCUT(mc_files,                  &macro_tap &kp LC(LA(LS(N0))))
        SHORTCUT(mc_preview,                &macro_tap &kp LC(LA(LS(N1))))
        SHORTCUT(mc_tabs,                   &macro_tap &kp LC(LA(LS(N2))))
        SHORTCUT(mc_term,                   &macro_tap &kp LC(LA(LS(N3))))
        SHORTCUT(mc_calc,                   &macro_tap &kp LC(LA(LS(N4))))
        SHORTCUT(mc_apps,                   &macro_tap &kp LC(LA(LS(N5))))
        SHORTCUT(mc_clip,                   &macro_tap &kp LC(LA(LS(N6))))
        SHORTCUT(mc_raise,                  &macro_tap &kp LC(LA(LS(N7))))
        SHORTCUT(mc_mic,                    &macro_tap &kp LC(LA(LS(N8))))
        SHORTCUT(mc_cam,                    &macro_tap &kp LC(LA(LS(N9))))

        MODTAP_SHORTCUT(th_tabs,            &mc_tabs)

        SHORTCUT(mc_meh_b,                  &macro_tap &kp LC(LA(LS(B))))
        SHORTCUT(mc_meh_m,                  &macro_tap &kp LC(LA(LS(M))))
        SHORTCUT(mc_meh_g,                  &macro_tap &kp LC(LA(LS(G))))
        SHORTCUT(mc_meh_l,                  &macro_tap &kp LC(LA(LS(L))))
        SHORTCUT(mc_meh_o,                  &macro_tap &kp LC(LA(LS(O))))
        SHORTCUT(mc_meh_u,                  &macro_tap &kp LC(LA(LS(U))))
        SHORTCUT(mc_meh_n,                  &macro_tap &kp LC(LA(LS(N))))
        MODTAP_SHORTCUT(th_meh_n,           &mc_meh_n)
        SHORTCUT(mc_meh_s,                  &macro_tap &kp LC(LA(LS(S))))
        SHORTCUT(mc_meh_t,                  &macro_tap &kp LC(LA(LS(T))))
        SHORTCUT(mc_meh_r,                  &macro_tap &kp LC(LA(LS(R))))
        SHORTCUT(mc_meh_a,                  &macro_tap &kp LC(LA(LS(A))))
        SHORTCUT(mc_meh_e,                  &macro_tap &kp LC(LA(LS(E))))
        MODTAP_SHORTCUT(th_meh_e,           &mc_meh_e)
        SHORTCUT(mc_meh_f,                  &macro_tap &kp LC(LA(LS(F))))
        SHORTCUT(mc_meh_c,                  &macro_tap &kp LC(LA(LS(C))))
        SHORTCUT(mc_meh_p,                  &macro_tap &kp LC(LA(LS(P))))
        SHORTCUT(mc_meh_h,                  &macro_tap &kp LC(LA(LS(H))))
        SHORTCUT(mc_meh_comma,              &macro_tap &kp LC(LA(LS(COMMA))))
        SHORTCUT(mc_meh_dot,                &macro_tap &kp LC(LA(LS(DOT))))
        SHORTCUT(mc_meh_w,                  &macro_tap &kp LC(LA(LS(W))))
        SHORTCUT(mc_meh_v,                  &macro_tap &kp LC(LA(LS(V))))
        SHORTCUT(mc_meh_z,                  &macro_tap &kp LC(LA(LS(Z))))
        SHORTCUT(mc_meh_j,                  &macro_tap &kp LC(LA(LS(J))))
        SHORTCUT(mc_meh_q,                  &macro_tap &kp LC(LA(LS(Q))))
        SHORTCUT(mc_meh_k,                  &macro_tap &kp LC(LA(LS(K))))
        SHORTCUT(mc_meh_x,                  &macro_tap &kp LC(LA(LS(X))))
        SHORTCUT(mc_meh_y,                  &macro_tap &kp LC(LA(LS(Y))))
        SHORTCUT(mc_meh_d,                  &macro_tap &kp LC(LA(LS(D))))
        SHORTCUT(mc_meh_i,                  &macro_tap &kp LC(LA(LS(I))))
        LAYERTAP_SHORTCUT(th_plain1,        &tc_smart_plain1)

        // Macros

        SHORTCUT(mc_selh,                   &macro_tap &kp LS(HOME))
        
        SHORTCUT(mc_selw,                   &macro_tap &kp LA(LEFT) &kp LA(RIGHT) \
                                            &macro_press &kp LA(LS(LEFT)) \
                                            &macro_pause_for_release \
                                            &macro_release &kp LA(LS(LEFT)) \
                                            &macro_tap &sl SHORTS_EXT_1)
        
        SHORTCUT(mc_seln,                   &macro_tap &kp HOME &kp HOME \
                                            &macro_press &kp LS(DOWN) \
                                            &macro_pause_for_release \
                                            &macro_release &kp LS(DOWN) \
                                            &macro_tap &sl SHORTS_EXT_1)
        
        SHORTCUT(mc_ext_sel,                &macro_press &key_repeat \
                                            &macro_pause_for_release \
                                            &macro_release &key_repeat \
                                            &macro_tap &sl SHORTS_EXT_1)
        MODTAP_SHORTCUT(th_ext_sel,         &mc_ext_sel)

        SHORTCUT(mc_zout,                   &macro_tap &kp LG(MINUS))
        SHORTCUT(mc_zin,                    &macro_tap &kp LG(PLUS))
        
        SHORTCUT(mc_z0,                     &macro_tap &kp LG(N0))
        SHORTCUT(mc_refresh,                &macro_tap &kp LG(R))
        SHORTCUT(mc_close_tab,              &macro_tap &kp LG(W))

        MODTAP_SHORTCUT(th_zoom,            &mc_z0)
        MORPHED_SHORTCUT(mm_ref_z0,         &mc_refresh, &mc_z0, MOD_RGUI)
        TAPHOLD_SHORTCUT(ht_ref_clo_z0,     &mm_ref_z0, &mc_close_tab)
        
        SHORTCUT(mc_app_swapper,            &macro_press &kp LGUI &mo SHORTS_EXT_2 &macro_tap &kp TAB &macro_pause_for_release &macro_release &kp LGUI &mo SHORTS_EXT_2)
        SHORTCUT(mc_app_quit,               &macro_tap &kp Q)
        SHORTCUT(mc_win_f,                  &macro_tap &kp TAB)
        SHORTCUT(mc_win_b,                  &macro_tap &kp LS(TAB))

        MORPHED_SHORTCUT_KM(mm_down_minus,  &kp DOWN, &kp MINUS, MOD_RGUI)
        MORPHED_SHORTCUT_KM(mm_up_plus,     &kp UP, &kp PLUS, MOD_RGUI)

        SHORTCUT(mc_lock,                   &macro_tap &kp LC(LG(Q)))

        SHORTCUT(mc_dqt0p,                  &macro_tap &kp DQT &kp N0 &kp P)

        SHORTCUT(mc_prevword,               &macro_tap &kp LA(LEFT))
        SHORTCUT(mc_nextword,               &macro_tap &kp LA(RIGHT))
        SHORTCUT(mc_delword,                &macro_tap &kp LA(BACKSPACE))
        SHORTCUT(mc_joinwords,              &macro_tap &kp LA(LEFT) &kp BACKSPACE &kp LA(RIGHT))

        SHORTCUT(mc_sc_nav,                 &macro_press &kp LSHFT &kp LCTL &mo NAV &macro_pause_for_release &macro_release &mo NAV &kp LSHFT &kp LCTL)
        SHORTCUT(mc_cg_nav,                 &macro_press &kp LCTL &kp LGUI &mo NAV &macro_pause_for_release &macro_release &mo NAV &kp LCTL &kp LGUI)
        SHORTCUT(mc_ag_nav,                 &macro_press &kp RALT &kp LGUI &mo NAV &macro_pause_for_release &macro_release &mo NAV &kp RALT &kp LGUI)

        SHORTCUT(mc_shortcuts,              &macro_tap &to ALPHA1 &macro_press &mo SHORTCUTS &macro_pause_for_release &macro_release &mo SHORTCUTS)
   };
};
